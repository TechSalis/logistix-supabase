

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "postgis" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."OrderStatus" AS ENUM (
    'pending',
    'accepted',
    'processing',
    'completed',
    'cancelled'
);


ALTER TYPE "public"."OrderStatus" OWNER TO "postgres";


CREATE TYPE "public"."OrderType" AS ENUM (
    'delivery',
    'food',
    'errands',
    'grocery'
);


ALTER TYPE "public"."OrderType" OWNER TO "postgres";


CREATE TYPE "public"."UserRole" AS ENUM (
    'customer',
    'rider',
    'company'
);


ALTER TYPE "public"."UserRole" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."fn_find_nearest_riders"("user_lat" double precision, "user_lng" double precision, "max_distance" double precision DEFAULT NULL::double precision, "filter_company_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("rider_id" "uuid", "metadata" "jsonb", "distance" double precision, "is_available" boolean)
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  SET search_path = 'public';
  RETURN QUERY
  select
    r.user_id as rider_id,
    u.metadata,
    ST_Distance(
      r.location::geography,
      ST_SetSRID(ST_MakePoint(user_lng, user_lat), 4326)::geography
    ) as distance,
    r.is_available
  from "Riders" r
  join "Profiles" u on r.user_id = u.user_id
  where
    (
      max_distance is null
      or ST_DWithin(
        r.location::geography,
        ST_SetSRID(ST_MakePoint(user_lng, user_lat), 4326)::geography,
        max_distance
      )
    ) and (filter_company_id is null or r.company_id = filter_company_id)

  order by
    r.is_available desc,
    distance asc;
END;
$$;


ALTER FUNCTION "public"."fn_find_nearest_riders"("user_lat" double precision, "user_lng" double precision, "max_distance" double precision, "filter_company_id" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."fn_handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  set search_path = 'public';
  insert into public."Profiles" (profile_id, user_id, metadata)
  values (new.id, new.id, new.raw_user_meta_data);
  return new;
end;$$;


ALTER FUNCTION "public"."fn_handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."companies" (
    "company_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);


ALTER TABLE "public"."companies" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."deliveries" (
    "order_id" "uuid" NOT NULL,
    "rider_id" "uuid",
    "assigned_at" timestamp with time zone,
    "eta" "text",
    "user_id" "uuid" NOT NULL,
    "status" "public"."OrderStatus" DEFAULT 'pending'::"public"."OrderStatus" NOT NULL
);


ALTER TABLE "public"."deliveries" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."orders" (
    "order_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "pickup" json,
    "dropoff" "jsonb",
    "description" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "extras" "jsonb",
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "order_type" "public"."OrderType" NOT NULL,
    "price" numeric,
    "ref_number" bigint DEFAULT ("floor"((("random"() * (90000000)::double precision) + (10000000)::double precision)))::bigint NOT NULL
);


ALTER TABLE "public"."orders" OWNER TO "postgres";


COMMENT ON TABLE "public"."orders" IS 'User Orders';



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "profile_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "metadata" "jsonb",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role" "public"."UserRole" NOT NULL
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."riders" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" "uuid",
    "is_available" boolean DEFAULT true NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "location" "extensions"."geography"
);


ALTER TABLE "public"."riders" OWNER TO "postgres";


ALTER TABLE ONLY "public"."companies"
    ADD CONSTRAINT "Companies_company_id_key" UNIQUE ("company_id");



ALTER TABLE ONLY "public"."companies"
    ADD CONSTRAINT "Companies_pkey" PRIMARY KEY ("company_id");



ALTER TABLE ONLY "public"."deliveries"
    ADD CONSTRAINT "Deliveries_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "Orders_order_id_key" UNIQUE ("order_id");



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "Orders_pkey" PRIMARY KEY ("order_id", "ref_number");



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "Orders_ref_number_key" UNIQUE ("ref_number");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "Profiles_pkey" PRIMARY KEY ("profile_id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "Profiles_user_id_key" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."riders"
    ADD CONSTRAINT "Riders_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."riders"
    ADD CONSTRAINT "Riders_rider_id_key" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."deliveries"
    ADD CONSTRAINT "Deliveries_order_id_fkey" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("order_id") ON UPDATE CASCADE ON DELETE SET DEFAULT;



ALTER TABLE ONLY "public"."deliveries"
    ADD CONSTRAINT "Deliveries_rider_id_fkey" FOREIGN KEY ("rider_id") REFERENCES "public"."riders"("user_id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."deliveries"
    ADD CONSTRAINT "Deliveries_user_id_fkey1" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("profile_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "Orders_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET DEFAULT;



ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "Orders_user_id_fkey1" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("profile_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "Profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET DEFAULT;



ALTER TABLE ONLY "public"."riders"
    ADD CONSTRAINT "Riders_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("company_id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."riders"
    ADD CONSTRAINT "Riders_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET DEFAULT;



ALTER TABLE ONLY "public"."riders"
    ADD CONSTRAINT "Riders_user_id_fkey1" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("profile_id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Allow users to view companies" ON "public"."companies" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable delete for users" ON "public"."deliveries" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."orders" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."profiles" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."riders" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."orders" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."riders" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."orders" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable read access for user" ON "public"."deliveries" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update access for assigned riders" ON "public"."deliveries" FOR UPDATE TO "authenticated" USING (("rider_id" = ( SELECT "auth"."uid"() AS "uid")));



CREATE POLICY "Enable update for user" ON "public"."deliveries" FOR UPDATE TO "authenticated" USING (( SELECT ("auth"."uid"() = "deliveries"."user_id")));



CREATE POLICY "Enable update for users" ON "public"."orders" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users based on user_id" ON "public"."riders" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users on their data" ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



ALTER TABLE "public"."companies" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."deliveries" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."orders" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."riders" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."orders";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































GRANT ALL ON FUNCTION "public"."fn_find_nearest_riders"("user_lat" double precision, "user_lng" double precision, "max_distance" double precision, "filter_company_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."fn_find_nearest_riders"("user_lat" double precision, "user_lng" double precision, "max_distance" double precision, "filter_company_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."fn_find_nearest_riders"("user_lat" double precision, "user_lng" double precision, "max_distance" double precision, "filter_company_id" "uuid") TO "service_role";



GRANT ALL ON FUNCTION "public"."fn_handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."fn_handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."fn_handle_new_user"() TO "service_role";

















































































GRANT ALL ON TABLE "public"."companies" TO "anon";
GRANT ALL ON TABLE "public"."companies" TO "authenticated";
GRANT ALL ON TABLE "public"."companies" TO "service_role";



GRANT ALL ON TABLE "public"."deliveries" TO "anon";
GRANT ALL ON TABLE "public"."deliveries" TO "authenticated";
GRANT ALL ON TABLE "public"."deliveries" TO "service_role";



GRANT ALL ON TABLE "public"."orders" TO "anon";
GRANT ALL ON TABLE "public"."orders" TO "authenticated";
GRANT ALL ON TABLE "public"."orders" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."riders" TO "anon";
GRANT ALL ON TABLE "public"."riders" TO "authenticated";
GRANT ALL ON TABLE "public"."riders" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;

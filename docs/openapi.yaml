openapi: 3.0.0
info:
  title: Logistix Supabase API
  version: 1.0.0
servers:
  - url: http://127.0.0.1:54321/functions/v1
    description: Local server
  - url: ''
    description: Development server
  - url: ''
    description: Production server
paths:
  /auth/signup:
    post:
      tags:
        - _Endpoints
        - Auth
      summary: Sign User up using email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - full_name
                - email
                - password
            example:
              full_name: John Doe
              email: user@email.com
              password: password
      responses:
        '201':
          description: User signed up successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400_Bad_request'
  /auth/login:
    post:
      tags:
        - _Endpoints
        - Auth
      summary: Log user in using email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: user@email.com
              password: password
      responses:
        '200':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400_Bad_request'
  /orders:
    post:
      tags:
        - _Endpoints
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Order'
                - type: object
                  properties:
                    order_id:
                      not: {}
              required:
                - order_type
                - description
      responses:
        '201':
          description: Order successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400_Bad_request'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
    get:
      tags:
        - _Endpoints
        - Orders
      summary: Get all orders for user
      description: Returns a list of orders created by the user.
      parameters:
        - name: page
          in: query
          example: 0
          schema:
            type: integer
            description: Pagination. Starts from 0
            default: 0
        - name: count
          in: query
          example: 10
          schema:
            type: integer
            description: Items per page
            default: 10
      responses:
        '200':
          description: List of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
  /orders/{id}:
    get:
      tags:
        - _Endpoints
        - Orders
      summary: Get all orders for user
      description: Returns a list of orders created by the user.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UID'
      responses:
        '200':
          description: List of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
  /riders:
    get:
      tags:
        - _Endpoints
        - Riders
      summary: Get nearest rider to coordinates
      description: Get nearest rider to coordinates
      parameters:
        - name: page
          in: query
          example: 0
          schema:
            type: integer
            description: Pagination. Starts from 0
            default: 0
        - name: count
          in: query
          example: 1
          schema:
            type: integer
            description: Amount of riders needed
            default: 1
      responses:
        '200':
          description: List of riders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rider'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
security:
  - Bearer: []
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters: {}
  schemas:
    UID:
      type: string
      format: uuid
    Role:
      type: string
      default: customer
      enum:
        - customer
        - rider
        - company
    User:
      type: object
      description: Auth User object
      properties:
        id:
          $ref: '#/components/schemas/UID'
        is_anonymous:
          type: boolean
        user_metadata:
          type: object
          properties:
            role:
              $ref: '#/components/schemas/Role'
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            imageUrl:
              type: string
    Session:
      type: object
      description: Auth Session object
      properties: {}
    UserData:
      type: object
      description: UserData object returned in Rider and Customer objects
      properties:
        user_id:
          $ref: '#/components/schemas/UID'
        role:
          $ref: '#/components/schemas/Role'
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        image_url:
          type: string
    Rider:
      type: object
      properties:
        rider_id:
          $ref: '#/components/schemas/UID'
        company_id:
          $ref: '#/components/schemas/UID'
        is_available:
          type: boolean
        company:
          $ref: '#/components/schemas/Company'
        user_data:
          $ref: '#/components/schemas/UserData'
    Company:
      type: object
      properties:
        company_id:
          $ref: '#/components/schemas/UID'
        name:
          type: string
    Address:
      type: object
      properties:
        name:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
    OrderType:
      type: string
      enum:
        - delivery
        - food
        - grocery
        - errands
    DeliveryStatus:
      type: string
      enum:
        - pending
        - accepted
        - in_progress
        - completed
        - cancelled
    Order:
      type: object
      properties:
        order_id:
          $ref: '#/components/schemas/UID'
        order_type:
          $ref: '#/components/schemas/OrderType'
        pickup:
          $ref: '#/components/schemas/Address'
        dropoff:
          $ref: '#/components/schemas/Address'
        description:
          type: string
        extras:
          type: object
          description: Dynamic Json data for flexibility.
    Delivery:
      type: object
      properties:
        delivery_id:
          $ref: '#/components/schemas/UID'
        order_id:
          $ref: '#/components/schemas/UID'
        rider_id:
          $ref: '#/components/schemas/UID'
        user_id:
          $ref: '#/components/schemas/UID'
        status:
          $ref: '#/components/schemas/DeliveryStatus'
        order:
          $ref: '#/components/schemas/Order'
        rider:
          $ref: '#/components/schemas/Rider'
        user:
          $ref: '#/components/schemas/UserData'
    Error_Response:
      type: string
  responses:
    401_Unauthorized:
      description: Unauthorized access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error_Response'
    400_Bad_request:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error_Response'
